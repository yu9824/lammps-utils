import io
import os
from pathlib import Path
from typing import Literal, Optional, Union, overload

import numpy as np

from lammps_utils import __version__
from lammps_utils.io._load import _read_data_or_buffer, get_n_atoms, load_data


@overload
def data2gro(
    filepath_data_or_buffer: Union[str, os.PathLike, io.TextIOBase],
    filepath_gro: Literal[None] = None,
) -> str: ...


@overload
def data2gro(
    filepath_data_or_buffer: Union[str, os.PathLike, io.TextIOBase],
    filepath_gro: Union[str, os.PathLike],
) -> Literal[None]: ...


def data2gro(
    filepath_data_or_buffer: Union[str, os.PathLike, io.TextIOBase],
    filepath_gro: Optional[Union[str, os.PathLike]] = None,
) -> Union[str, None]:
    """
    Convert LAMMPS data file to GROMACS gro file.

    Parameters
    ----------
    filepath_data_or_buffer : Union[str, os.PathLike, io.TextIOBase]
        file path or buffer of LAMMPS data file

    filepath_gro : Optional[Union[str, os.PathLike]], optional
        file path of GROMACS gro file, by default None

    Returns
    -------
    Union[str, None]
        GROMACS gro file content if filepath_gro is None, otherwise None

    Raises
    ------
    FileNotFoundError
        If the directory of filepath_gro does not exist
    """
    if filepath_gro is not None:
        filepath_gro = Path(filepath_gro)
        if not filepath_gro.parent.is_dir():
            raise FileNotFoundError

    content_data = _read_data_or_buffer(filepath_data_or_buffer)

    df_data, cell_bounds = load_data(
        io.StringIO(content_data), return_cell_bounds=True
    )
    n_atoms = get_n_atoms(io.StringIO(content_data))

    cell_size = (
        np.array([_max - _min for _min, _max in cell_bounds]) / 10
    )  # angstrom to nm

    content_gro = (
        f"Generated by lammps-utils v{__version__}\n{n_atoms:>5}\n"
        + "\n".join(
            (
                df_data["mol"].map(lambda x: "{:>5}".format(x))
                + "MOL01"
                + df_data["symbol"].map(lambda x: "{:>5}".format(x))
                + df_data.index.map(lambda x: "{:>5}".format(x))
                + (
                    (
                        (
                            df_data[["x", "y", "z"]]
                            - np.array([_min for _min, _ in cell_bounds])
                        )
                        / 10  # angstrom to nm
                    )
                    .map(lambda x: "{:>8.3f}".format(x))
                    .sum(axis=1)
                )
            ).tolist()
        )
        + "\n"
        + " ".join(map(lambda x: "{:.4f}".format(x), cell_size))
    )

    if filepath_gro is not None:
        with open(filepath_gro, mode="w") as f:
            f.write(content_gro)
        return None
    else:
        return content_gro
